{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  const allData = babyData.map(babysitters => babysitters.slots);\n  const allSlots = [{\n    day_of_week: 0,\n    time_of_day: []\n  }, {\n    day_of_week: 1,\n    time_of_day: []\n  }, {\n    day_of_week: 2,\n    time_of_day: []\n  }, {\n    day_of_week: 3,\n    time_of_day: []\n  }, {\n    day_of_week: 4,\n    time_of_day: []\n  }, {\n    day_of_week: 5,\n    time_of_day: []\n  }, {\n    day_of_week: 6,\n    time_of_day: []\n  }];\n\n  for (const elem of allData) {\n    for (const slot of elem) {\n      if (allSlots[slot.day_of_week].time_of_day !== slot.time_of_day) {\n        allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day);\n      }\n    }\n  }\n\n  return allSlots;\n};\nexport function fetchBabysitters() {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING_BABYSITTERS'\n    });\n\n    try {\n      const res = await fetch('http://localhost:3000/api/v1/babysitters');\n\n      if (!res.ok) {\n        throw res;\n      }\n\n      const babyData = await res.json(slotMerge(babyData));\n      slotMerge(babyData);\n      dispatch(getBabysitters(babyData));\n    } catch (err) {\n      alert(\"Failed to load babysitters\");\n    }\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","allData","map","babysitters","slots","allSlots","day_of_week","time_of_day","elem","slot","push","fetchBabysitters","dispatch","res","fetch","ok","json","err","alert"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAaC,WAAW,IAAIA,WAAW,CAACC,KAAxC,CAAhB;AACA,QAAMC,QAAQ,GAAG,CACb;AACIC,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GADa,EAKb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GALa,EASb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GATa,EAab;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAba,EAiBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAjBa,EAqBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GArBa,EAyBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAzBa,CAAjB;;AA+BA,OAAK,MAAMC,IAAX,IAAmBP,OAAnB,EAA4B;AACxB,SAAK,MAAMQ,IAAX,IAAmBD,IAAnB,EAAyB;AACrB,UAAIH,QAAQ,CAACI,IAAI,CAACH,WAAN,CAAR,CAA2BC,WAA3B,KAA2CE,IAAI,CAACF,WAApD,EAAiE;AAC7DF,QAAAA,QAAQ,CAACI,IAAI,CAACH,WAAN,CAAR,CAA2BC,WAA3B,CAAuCG,IAAvC,CAA4CD,IAAI,CAACF,WAAjD;AACH;AACJ;AACJ;;AACD,SAAOF,QAAP;AACH,CAzCM;AA2CP,OAAO,SAASM,gBAAT,GAA4B;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAC;AAAEf,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAAD,CAAvB;;AACA,UAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACT,cAAMF,GAAN;AACH;;AACD,YAAMb,QAAQ,GAAG,MAAMa,GAAG,CAACG,IAAJ,CAASjB,SAAS,CAACC,QAAD,CAAlB,CAAvB;AAEAD,MAAAA,SAAS,CAACC,QAAD,CAAT;AAEAY,MAAAA,QAAQ,CAACjB,cAAc,CAACK,QAAD,CAAf,CAAR;AACH,KAVD,CAUE,OAAOiB,GAAP,EAAY;AACVC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,GAfD;AAiBH","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    const allData = babyData.map(babysitters => babysitters.slots)\r\n    const allSlots = [\r\n        {\r\n            day_of_week: 0,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 1,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 2,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 3,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 4,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 5,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 6,\r\n            time_of_day: []\r\n        },\r\n    ]\r\n\r\n    for (const elem of allData) {\r\n        for (const slot of elem) {\r\n            if (allSlots[slot.day_of_week].time_of_day !== slot.time_of_day) {\r\n                allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day)\r\n            }\r\n        }\r\n    }\r\n    return allSlots\r\n}\r\n\r\nexport function fetchBabysitters() {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'LOADING_BABYSITTERS' })\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/v1/babysitters')\r\n            if (!res.ok) {\r\n                throw res\r\n            }\r\n            const babyData = await res.json(slotMerge(babyData))\r\n\r\n            slotMerge(babyData)\r\n\r\n            dispatch(getBabysitters(babyData))\r\n        } catch (err) {\r\n            alert(\"Failed to load babysitters\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}