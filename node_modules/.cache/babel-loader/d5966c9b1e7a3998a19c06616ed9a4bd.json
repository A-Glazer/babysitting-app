{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  // return console.log(\"babyData test\", babyData[0].slots)\n  const allData = babyData.map(babysitters => babysitters.slots);\n  const slots = allData.map(slot => slot);\n  const allSlots = [];\n\n  for (const elem of slots) {\n    console.log(\"elem is\", elem[0].day_of_week); // const index = allSlots.findIndex(s => s.day_of_week === slots.day_of_week)\n  }\n};\nexport function fetchBabysitters() {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING_BABYSITTERS'\n    });\n\n    try {\n      const res = await fetch('http://localhost:3000/api/v1/babysitters');\n\n      if (!res.ok) {\n        throw res;\n      }\n\n      const babyData = await res.json();\n      slotMerge(babyData);\n      dispatch(getBabysitters(babyData));\n    } catch (err) {\n      alert(\"Failed to load babysitters\");\n    }\n  };\n}\n{\n  /*\r\n  const data = {\r\n  slots: \r\n  [\r\n  {\r\n  \tday: \"Saturday\",\r\n   \ttime: \"Morning\",\r\n  },\r\n  {\r\n   \tday: \"Saturday\",\r\n  \ttime: \"Afternoon\"\r\n  },\r\n  {\r\n  \tday: \"Monday\",\r\n  \ttime: \"Evening\"\r\n  }\r\n  ]\r\n  }\r\n  ​\r\n  const slots = data.slots\r\n  const consolidatedSlots = []\r\n  for(slot of slots){\r\n  const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n  if(index !== -1){ // if the index is not -1 it means it exists\r\n  \r\n  // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n  consolidatedSlots[index].times.push(slot.time)\r\n  }else{ // if index IS -1, you couldnt find a slot with this day\r\n  \r\n  // turn time into times and make it an array of the time option\r\n  consolidatedSlots.push({...slot, times: [slot.time]}) \r\n  }\r\n  }\r\n  ​\r\n  // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n  */\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","allData","map","babysitters","slots","slot","allSlots","elem","console","log","day_of_week","fetchBabysitters","dispatch","res","fetch","ok","json","err","alert"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC;AACA,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAaC,WAAW,IAAIA,WAAW,CAACC,KAAxC,CAAhB;AACA,QAAMA,KAAK,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAI,IAAIA,IAApB,CAAd;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,MAAMC,IAAX,IAAmBH,KAAnB,EAA0B;AACtBI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAA/B,EADsB,CAEtB;AACH;AAEJ,CAVM;AAYP,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAC;AAAEf,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAAD,CAAvB;;AACA,UAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACT,cAAMF,GAAN;AACH;;AACD,YAAMb,QAAQ,GAAG,MAAMa,GAAG,CAACG,IAAJ,EAAvB;AAEAjB,MAAAA,SAAS,CAACC,QAAD,CAAT;AAEAY,MAAAA,QAAQ,CAACjB,cAAc,CAACK,QAAD,CAAf,CAAR;AACH,KAVD,CAUE,OAAOiB,GAAP,EAAY;AACVC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,GAfD;AAiBH;AAID;AAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCC","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    // return console.log(\"babyData test\", babyData[0].slots)\r\n    const allData = babyData.map(babysitters => babysitters.slots)\r\n    const slots = allData.map(slot => slot)\r\n    const allSlots = []\r\n    for (const elem of slots) {\r\n        console.log(\"elem is\", elem[0].day_of_week)\r\n        // const index = allSlots.findIndex(s => s.day_of_week === slots.day_of_week)\r\n    }\r\n\r\n}\r\n\r\nexport function fetchBabysitters() {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'LOADING_BABYSITTERS' })\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/v1/babysitters')\r\n            if (!res.ok) {\r\n                throw res\r\n            }\r\n            const babyData = await res.json()\r\n\r\n            slotMerge(babyData)\r\n\r\n            dispatch(getBabysitters(babyData))\r\n        } catch (err) {\r\n            alert(\"Failed to load babysitters\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n{ /*\r\nconst data = {\r\n\tslots: \r\n\t[\r\n\t\t{\r\n\t\t\tday: \"Saturday\",\r\n\t\t \ttime: \"Morning\",\r\n\t\t},\r\n\t\t{\r\n\t\t \tday: \"Saturday\",\r\n\t\t\ttime: \"Afternoon\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tday: \"Monday\",\r\n\t\t\ttime: \"Evening\"\r\n\t\t}\r\n\t]\r\n}\r\n​\r\nconst slots = data.slots\r\nconst consolidatedSlots = []\r\nfor(slot of slots){\r\n\tconst index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n\tif(index !== -1){ // if the index is not -1 it means it exists\r\n\t\t\r\n\t\t// add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n\t\tconsolidatedSlots[index].times.push(slot.time)\r\n\t}else{ // if index IS -1, you couldnt find a slot with this day\r\n\t\t\r\n\t\t// turn time into times and make it an array of the time option\r\n\t\tconsolidatedSlots.push({...slot, times: [slot.time]}) \r\n\t}\r\n}\r\n​\r\n// now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n*/}"]},"metadata":{},"sourceType":"module"}