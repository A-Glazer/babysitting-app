{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport { Link } from 'react-router-dom';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\n\nconst Slots = props => {\n  console.log(\"this is props\", props);\n\n  function dayToString(day_of_week) {\n    if (day_of_week === 0) {\n      return \"Sunday\";\n    } else if (day_of_week === 1) {\n      return \"Monday\";\n    } else if (day_of_week === 2) {\n      return \"Tuesday\";\n    } else if (day_of_week === 3) {\n      return \"Wednesday\";\n    } else if (day_of_week === 4) {\n      return \"Thursday\";\n    } else if (day_of_week == 5) {\n      return \"Friday\";\n    } else if (day_of_week === 6) {\n      return \"Saturday\";\n    }\n  }\n\n  function timeToString(time_of_day) {\n    if (time_of_day === 0) {\n      return \"Morning\";\n    } else if (time_of_day === 1) {\n      return \"Afternoon\";\n    } else if (time_of_day === 2) {\n      return \"Evening\";\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"slot-card-padding\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 0) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Sunday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })), timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 1) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Monday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 2) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Tueday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 3) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Wednesday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 4) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Thursday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 5) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Friday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  }), props.slots && props.slots.map(slot => {\n    if (slot.day_of_week === 6) {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Saturday\"), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, timeToString(slot.time_of_day))));\n    }\n  })));\n  {\n    /* end of idea #1 */\n  }\n  {}\n  /* idea #2 */\n  //     this.state={\n  //         Sun: [],\n  //         Mon: [],\n  //         Tue: [],\n  //         Wed: [],\n  //         Thur: [],\n  //         Fri: [],\n  //         Sat: []\n  //     }\n  // {props.slots.map(slot =>\n  //     {if (slot.day_of_week === 3) {\n  //         this.setState{\n  //             [...state, (timeToString(slot.time_of_day))]\n  //         }  \n  //          }}\n  //          )} \n\n  {\n    /* end of idea #2 */\n  }\n};\n\nexport default Slots;","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js"],"names":["React","Card","Button","CardDeck","Link","ListGroup","Row","Slots","props","console","log","dayToString","day_of_week","timeToString","time_of_day","slots","map","slot","width"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport {Link} from 'react-router-dom'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Row from 'react-bootstrap/Row'\r\n\r\n\r\nconst Slots = (props) => {\r\n    console.log(\"this is props\", props)\r\n\r\n    function dayToString(day_of_week){\r\n        if (day_of_week === 0){\r\n            return \"Sunday\"\r\n        }else if (day_of_week === 1){\r\n            return \"Monday\"\r\n        }else if (day_of_week === 2){\r\n            return \"Tuesday\"\r\n        }else if (day_of_week === 3){\r\n            return \"Wednesday\"\r\n        }else if (day_of_week === 4){\r\n            return \"Thursday\"\r\n        }else if (day_of_week == 5){\r\n            return \"Friday\"\r\n        }else if (day_of_week === 6){\r\n            return \"Saturday\"\r\n        }\r\n    }\r\n\r\n    function timeToString(time_of_day){\r\n        if (time_of_day === 0){\r\n            return \"Morning\"\r\n        }else if (time_of_day === 1){\r\n            return \"Afternoon\"\r\n        }else if (time_of_day === 2){\r\n            return \"Evening\"\r\n        }\r\n\r\n    }\r\n\r\n     return (\r\n        <div>\r\n            <Row className=\"slot-card-padding\">\r\n            {/* idea #1 */}\r\n           \r\n            {/* Sunday */}\r\n             {props.slots && props.slots.map(slot => \r\n                {if (slot.day_of_week === 0) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Sunday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    <ul>\r\n                        <li>\r\n                            \r\n                        </li>\r\n                    </ul>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )} \r\n            {/* Monday */}\r\n             {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 1) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Monday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )} \r\n        {/* Tuesday */}\r\n            {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 2) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Tueday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n            }}\r\n            )}\r\n\r\n        {/* Wednesday */}\r\n        {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 3) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Wednesday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}\r\n        {/* Thursday */}\r\n        {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 4) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Thursday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}\r\n        {/* Friday */}\r\n        {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 5) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Friday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}\r\n        {/* Saturday */}\r\n        {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 6) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Saturday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}\r\n        </Row>\r\n    </div>\r\n        )\r\n             {/* end of idea #1 */}\r\n    {/* idea #2 */}\r\n    //     this.state={\r\n    //         Sun: [],\r\n    //         Mon: [],\r\n    //         Tue: [],\r\n    //         Wed: [],\r\n    //         Thur: [],\r\n    //         Fri: [],\r\n    //         Sat: []\r\n    //     }\r\n  \r\n    // {props.slots.map(slot =>\r\n    //     {if (slot.day_of_week === 3) {\r\n    //         this.setState{\r\n    //             [...state, (timeToString(slot.time_of_day))]\r\n    //         }  \r\n                    \r\n                    \r\n                        \r\n                    \r\n                \r\n                \r\n    //          }}\r\n    //          )} \r\n    {/* end of idea #2 */}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Slots"]},"metadata":{},"sourceType":"module"}