{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport { Link } from 'react-router-dom';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport { render } from '@testing-library/react';\nimport Col from 'react-bootstrap/Col';\n\nconst Slots = ({\n  babysitter\n}) => {\n  console.log(\"this is props\", babysitter);\n\n  function dayToString(day_of_week) {\n    if (day_of_week === 0) {\n      return \"Sunday\";\n    } else if (day_of_week === 1) {\n      return \"Monday\";\n    } else if (day_of_week === 2) {\n      return \"Tuesday\";\n    } else if (day_of_week === 3) {\n      return \"Wednesday\";\n    } else if (day_of_week === 4) {\n      return \"Thursday\";\n    } else if (day_of_week == 5) {\n      return \"Friday\";\n    } else if (day_of_week === 6) {\n      return \"Saturday\";\n    }\n  }\n\n  function timeToString(time_of_day) {\n    if (time_of_day === 0) {\n      return \"Morning\";\n    } else if (time_of_day === 1) {\n      return \"Afternoon\";\n    } else if (time_of_day === 2) {\n      return \"Evening\";\n    }\n  }\n\n  const theSlot = slot => {\n    let slots;\n    slot.time_of_day.map(time => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, timeToString(time)));\n  };\n\n  function card(slot) {\n    return React.createElement(Row, {\n      className: \"babyCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(CardDeck, {\n      className: \"card-padding date-cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Card, {\n      bg: \"light\",\n      style: {\n        width: '14rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, dayToString(slot.day_of_week)), React.createElement(ListGroup, {\n      variant: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, theSlot(slot))))));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, babysitter.slots.map(slot => {\n    return card(slot);\n  }));\n};\n\nexport default Slots; // let bigSlots = props.slots && props.slots.map(slot => slot)\n// let times = Object.values(bigSlots.filter(data => data))\n// return (\n//     <div>\n//         {times}\n//     </div>\n//     )\n// slot {id: 7, day_of_week: 6, time_of_day: 2, babysitter_id: 1}\n// console.log(\"slotBig is\", slotBig)\n//     <div>\n//     {console.log(\"this is slots\", props.slots)}\n//  {props.slots && props.slots.map(slot =>\n//  console.log(\"this is slot\", slot),\n//  let slotsArr = Object.values(slot.filter(slot => slot.day_of_week === 0))\n//  )}\n// return(\n//     </div>\n//  )\n//  return (\n// <div>\n\n{\n  /* <Row className=\"slot-card-padding\"> */\n}\n{\n  /* idea #1 */\n}\n{\n  /* Sunday */\n}\n{\n  /* {props.slots && props.slots.map(slot => \r\n                 {if (slot.day_of_week === 0) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Sunday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                     \r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n              }}\r\n              )}  */\n}\n{\n  /* Monday */\n}\n{\n  /* {props.slots && props.slots.map(slot =>\r\n                 {if (slot.day_of_week === 1) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Monday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                     \r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n              }}\r\n              )}  */\n}\n{\n  /* Tuesday */\n}\n{\n  /* {props.slots && props.slots.map(slot =>\r\n                 {if (slot.day_of_week === 2) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Tueday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                     \r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n             }}\r\n             )} */\n}\n{\n  /* Wednesday */\n}\n{\n  /* {props.slots && props.slots.map(slot =>\r\n                 {if (slot.day_of_week === 3) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Wednesday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                     \r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n              }}\r\n              )} */\n}\n{\n  /* Thursday */\n}\n{\n  /* {props.slots && props.slots.map(slot =>\r\n                 {if (slot.day_of_week === 4) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Thursday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                     \r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n              }}\r\n              )} */\n}\n{\n  /* Friday */\n}\n{\n  /* {props.slots && props.slots.map(slot =>\r\n                 {if (slot.day_of_week === 5) {\r\n                 return(\r\n                     <Card style={{ width: '18rem' }}>\r\n                     <Card.Header>Friday</Card.Header>\r\n                     <ListGroup variant=\"info\">\r\n                     <ListGroup.Item>\r\n                     {(timeToString(slot.time_of_day))}\r\n                         </ListGroup.Item>\r\n                 </ListGroup>\r\n                 </Card>\r\n                 )\r\n              }}\r\n              )} */\n}\n{}\n/* Saturday */\n// return(\n\n{\n  /*   timeToString(slot.time_of_day)\r\n      \r\n           }\r\n                {if (slot.day_of_week === 6) { \r\n             //     return(\r\n             //         <Card style={{ width: '18rem' }}>\r\n             //         <Card.Header>Saturday</Card.Header>\r\n             //         <ListGroup variant=\"info\">\r\n             //         <ListGroup.Item>\r\n             //         {(timeToString(slot.time_of_day))}\r\n             //             </ListGroup.Item>\r\n                     \r\n             //     </ListGroup>\r\n             //     </Card>\r\n             //     )\r\n             //  }}\r\n             //  )}\r\n              </div>\r\n         )\r\n              {/* end of idea #1 */\n}\n{\n  /* ) */\n}\n{\n  /* </Row> */\n}\n{\n  /* idea #2 */\n}\n{}\n/* end of idea #2 */\n// const captionsPG = Object.values(state.all.filter(c => c.rating === \"PG\"))","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js"],"names":["React","Card","Button","CardDeck","Link","ListGroup","Row","render","Col","Slots","babysitter","console","log","dayToString","day_of_week","timeToString","time_of_day","theSlot","slot","slots","map","time","card","width"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport { Link } from 'react-router-dom'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Row from 'react-bootstrap/Row'\r\nimport { render } from '@testing-library/react'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nconst Slots = ({ babysitter }) => {\r\n\r\n    console.log(\"this is props\", babysitter)\r\n\r\n    function dayToString(day_of_week) {\r\n        if (day_of_week === 0) {\r\n            return \"Sunday\"\r\n        } else if (day_of_week === 1) {\r\n            return \"Monday\"\r\n        } else if (day_of_week === 2) {\r\n            return \"Tuesday\"\r\n        } else if (day_of_week === 3) {\r\n            return \"Wednesday\"\r\n        } else if (day_of_week === 4) {\r\n            return \"Thursday\"\r\n        } else if (day_of_week == 5) {\r\n            return \"Friday\"\r\n        } else if (day_of_week === 6) {\r\n            return \"Saturday\"\r\n        }\r\n    }\r\n\r\n    function timeToString(time_of_day) {\r\n        if (time_of_day === 0) {\r\n            return \"Morning\"\r\n        } else if (time_of_day === 1) {\r\n            return \"Afternoon\"\r\n        } else if (time_of_day === 2) {\r\n            return \"Evening\"\r\n        }\r\n    }\r\n\r\n    const theSlot = slot => {\r\n        let slots \r\n        slot.time_of_day.map(time =><div>{timeToString(time)}</div>)}\r\n\r\n    function card(slot) {\r\n        return (\r\n            <Row className=\"babyCard\">\r\n                <CardDeck className=\"card-padding date-cards\">\r\n                    <Card bg=\"light\" style={{ width: '14rem' }}>\r\n                        <Card.Header>{dayToString(slot.day_of_week)}</Card.Header>\r\n                        <ListGroup variant=\"info\">\r\n                            <ListGroup.Item>\r\n                                {theSlot(slot)}\r\n                                {/* {slot.time_of_day.map(time =><div>{timeToString(time)}</div>)} */}\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </CardDeck>\r\n            </Row >\r\n\r\n        )\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            {babysitter.slots.map(slot => { return card(slot) })}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Slots\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// let bigSlots = props.slots && props.slots.map(slot => slot)\r\n// let times = Object.values(bigSlots.filter(data => data))\r\n// return (\r\n//     <div>\r\n//         {times}\r\n//     </div>\r\n//     )\r\n// slot {id: 7, day_of_week: 6, time_of_day: 2, babysitter_id: 1}\r\n\r\n// console.log(\"slotBig is\", slotBig)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     <div>\r\n//     {console.log(\"this is slots\", props.slots)}\r\n//  {props.slots && props.slots.map(slot =>\r\n//  console.log(\"this is slot\", slot),\r\n//  let slotsArr = Object.values(slot.filter(slot => slot.day_of_week === 0))\r\n//  )}\r\n// return(\r\n\r\n//     </div>\r\n//  )\r\n\r\n//  return (\r\n// <div>\r\n{/* <Row className=\"slot-card-padding\"> */ }\r\n{/* idea #1 */ }\r\n\r\n{/* Sunday */ }\r\n{/* {props.slots && props.slots.map(slot => \r\n                {if (slot.day_of_week === 0) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Sunday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}  */}\r\n{/* Monday */ }\r\n{/* {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 1) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Monday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )}  */}\r\n{/* Tuesday */ }\r\n{/* {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 2) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Tueday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n            }}\r\n            )} */}\r\n\r\n{/* Wednesday */ }\r\n{/* {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 3) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Wednesday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )} */}\r\n{/* Thursday */ }\r\n{/* {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 4) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Thursday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                    \r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )} */}\r\n{/* Friday */ }\r\n{/* {props.slots && props.slots.map(slot =>\r\n                {if (slot.day_of_week === 5) {\r\n                return(\r\n                    <Card style={{ width: '18rem' }}>\r\n                    <Card.Header>Friday</Card.Header>\r\n                    <ListGroup variant=\"info\">\r\n                    <ListGroup.Item>\r\n                    {(timeToString(slot.time_of_day))}\r\n                        </ListGroup.Item>\r\n                </ListGroup>\r\n                </Card>\r\n                )\r\n             }}\r\n             )} */}\r\n{/* Saturday */ }\r\n// return(\r\n\r\n\r\n{/*   timeToString(slot.time_of_day)\r\n     \r\n          }\r\n               {if (slot.day_of_week === 6) { \r\n            //     return(\r\n            //         <Card style={{ width: '18rem' }}>\r\n            //         <Card.Header>Saturday</Card.Header>\r\n            //         <ListGroup variant=\"info\">\r\n            //         <ListGroup.Item>\r\n            //         {(timeToString(slot.time_of_day))}\r\n            //             </ListGroup.Item>\r\n                    \r\n            //     </ListGroup>\r\n            //     </Card>\r\n            //     )\r\n            //  }}\r\n            //  )}\r\n             </div>\r\n        )\r\n             {/* end of idea #1 */}\r\n{/* ) */ }\r\n{/* </Row> */ }\r\n\r\n\r\n{/* idea #2 */ }\r\n\r\n\r\n\r\n{/* end of idea #2 */ }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const captionsPG = Object.values(state.all.filter(c => c.rating === \"PG\"))\r\n"]},"metadata":{},"sourceType":"module"}