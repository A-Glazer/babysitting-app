{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport { connect } from 'react-redux';\nimport { deleteSlot } from '../actions/deleteSlot';\n\nconst Slots = ({\n  babysitter,\n  deleteSlot\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, babysitter.slots.map(slot => {\n    return card(slot);\n  }));\n\n  function dayToString(day_of_week) {\n    if (day_of_week === 0) {\n      return \"Sunday\";\n    } else if (day_of_week === 1) {\n      return \"Monday\";\n    } else if (day_of_week === 2) {\n      return \"Tuesday\";\n    } else if (day_of_week === 3) {\n      return \"Wednesday\";\n    } else if (day_of_week === 4) {\n      return \"Thursday\";\n    } else if (day_of_week == 5) {\n      return \"Friday\";\n    } else if (day_of_week === 6) {\n      return \"Saturday\";\n    }\n  }\n\n  function removeSlot(slot, babysitter) {\n    deleteSlot(slot, babysitter);\n  }\n\n  function card(slot) {\n    return React.createElement(Row, {\n      className: \"babyCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(CardDeck, {\n      className: \"card-padding date-cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Card, {\n      bg: \"light\",\n      style: {\n        width: '14rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, dayToString(slot.day_of_week)), React.createElement(ListGroup, {\n      variant: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(ListGroup.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, theSlot(slot.time_of_day), React.createElement(\"button\", {\n      variant: \"link\",\n      size: \"sm\",\n      className: \"reset-button\",\n      onClick: () => removeSlot(slot, babysitter),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Reset \", dayToString(slot.day_of_week)))))));\n  }\n\n  function theSlot(time_of_day) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, time_of_day.map(time => {\n      if (time.time === 0) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"Morning\");\n      } else if (time.time === 1) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Afternoon\");\n      } else if (time.time === 2) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Evening\");\n      }\n    }));\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    babysitters: state.babysitters,\n    loading: state.loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteSlot\n})(Slots);","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js"],"names":["React","Card","CardDeck","ListGroup","Row","connect","deleteSlot","Slots","babysitter","slots","map","slot","card","dayToString","day_of_week","removeSlot","width","theSlot","time_of_day","time","mapStateToProps","state","babysitters","loading"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcF,EAAAA;AAAd,CAAD,KAAgC;AAE1C,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,UAAU,CAACC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AAAE,WAAOC,IAAI,CAACD,IAAD,CAAX;AAAmB,GAAlD,CADL,CADJ;;AAMA,WAASE,WAAT,CAAqBC,WAArB,EAAkC;AAC9B,QAAIA,WAAW,KAAK,CAApB,EAAuB;AACnB,aAAO,QAAP;AACH,KAFD,MAEO,IAAIA,WAAW,KAAK,CAApB,EAAuB;AAC1B,aAAO,QAAP;AACH,KAFM,MAEA,IAAIA,WAAW,KAAK,CAApB,EAAuB;AAC1B,aAAO,SAAP;AACH,KAFM,MAEA,IAAIA,WAAW,KAAK,CAApB,EAAuB;AAC1B,aAAO,WAAP;AACH,KAFM,MAEA,IAAIA,WAAW,KAAK,CAApB,EAAuB;AAC1B,aAAO,UAAP;AACH,KAFM,MAEA,IAAIA,WAAW,IAAI,CAAnB,EAAsB;AACzB,aAAO,QAAP;AACH,KAFM,MAEA,IAAIA,WAAW,KAAK,CAApB,EAAuB;AAC1B,aAAO,UAAP;AACH;AACJ;;AAED,WAASC,UAAT,CAAoBJ,IAApB,EAA0BH,UAA1B,EAAsC;AAClCF,IAAAA,UAAU,CAACK,IAAD,EAAOH,UAAP,CAAV;AACH;;AAED,WAASI,IAAT,CAAcD,IAAd,EAAoB;AAChB,WACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,SAAS,EAAC,yBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,OAAT;AAAiB,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcH,WAAW,CAACF,IAAI,CAACG,WAAN,CAAzB,CADJ,EAEI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKG,OAAO,CAACN,IAAI,CAACO,WAAN,CADZ,EAEI;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAuB,MAAA,IAAI,EAAC,IAA5B;AAAiC,MAAA,SAAS,EAAC,cAA3C;AAA0D,MAAA,OAAO,EAAE,MAAMH,UAAU,CAACJ,IAAD,EAAOH,UAAP,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA8GK,WAAW,CAACF,IAAI,CAACG,WAAN,CAAzH,CAFJ,CADJ,CAFJ,CADJ,CADJ,CADJ;AAeH;;AAED,WAASG,OAAT,CAAiBC,WAAjB,EAA8B;AAC1B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,WAAW,CAACR,GAAZ,CAAgBS,IAAI,IAAI;AACjC,UAAIA,IAAI,CAACA,IAAL,KAAc,CAAlB,EAAqB;AACjB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH,OAFD,MAEO,IAAIA,IAAI,CAACA,IAAL,KAAc,CAAlB,EAAqB;AACxB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACH,OAFM,MAEA,IAAIA,IAAI,CAACA,IAAL,KAAc,CAAlB,EAAqB;AACxB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH;AACJ,KARY,CAAN,CAAP;AAWH;AACJ,CA7DD;;AA+DA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,OAAO,EAAEF,KAAK,CAACE;AAFZ,GAAP;AAIH,CALD;;AAOA,eAAelB,OAAO,CAACe,eAAD,EAAkB;AAAEd,EAAAA;AAAF,CAAlB,CAAP,CAAyCC,KAAzC,CAAf","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Row from 'react-bootstrap/Row'\r\nimport { connect } from 'react-redux'\r\nimport { deleteSlot } from '../actions/deleteSlot'\r\n\r\nconst Slots = ({ babysitter, deleteSlot }) => {\r\n\r\n    return (\r\n        <div>\r\n            {babysitter.slots.map(slot => { return card(slot) })}\r\n        </div>\r\n    )\r\n\r\n    function dayToString(day_of_week) {\r\n        if (day_of_week === 0) {\r\n            return \"Sunday\"\r\n        } else if (day_of_week === 1) {\r\n            return \"Monday\"\r\n        } else if (day_of_week === 2) {\r\n            return \"Tuesday\"\r\n        } else if (day_of_week === 3) {\r\n            return \"Wednesday\"\r\n        } else if (day_of_week === 4) {\r\n            return \"Thursday\"\r\n        } else if (day_of_week == 5) {\r\n            return \"Friday\"\r\n        } else if (day_of_week === 6) {\r\n            return \"Saturday\"\r\n        }\r\n    }\r\n\r\n    function removeSlot(slot, babysitter) {\r\n        deleteSlot(slot, babysitter)\r\n    }\r\n\r\n    function card(slot) {\r\n        return (\r\n            <Row className=\"babyCard\">\r\n                <CardDeck className=\"card-padding date-cards\">\r\n                    <Card bg=\"light\" style={{ width: '14rem' }}>\r\n                        <Card.Header>{dayToString(slot.day_of_week)}</Card.Header>\r\n                        <ListGroup variant=\"info\">\r\n                            <ListGroup.Item>\r\n                                {theSlot(slot.time_of_day)}\r\n                                <button variant=\"link\" size=\"sm\" className=\"reset-button\" onClick={() => removeSlot(slot, babysitter)}>Reset {dayToString(slot.day_of_week)}</button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </CardDeck>\r\n            </Row >\r\n        )\r\n    }\r\n\r\n    function theSlot(time_of_day) {\r\n        return <div>{time_of_day.map(time => {\r\n            if (time.time === 0) {\r\n                return <li>Morning</li>\r\n            } else if (time.time === 1) {\r\n                return <li>Afternoon</li>\r\n            } else if (time.time === 2) {\r\n                return <li>Evening</li>\r\n            }\r\n        })\r\n        }\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        babysitters: state.babysitters,\r\n        loading: state.loading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteSlot })(Slots)\r\n"]},"metadata":{},"sourceType":"module"}