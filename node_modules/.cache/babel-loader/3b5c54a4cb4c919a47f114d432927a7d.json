{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  const allData = babyData.map(babysitters => babysitters.slots);\n  console.log(\"allData is level 1\", allData); // const babysitters = allData.map(function(babysitter){\n  //     return babysitter\n  // })\n  // console.log(\"babysitters level 2\", babysitters)\n  // const slots = babysitters.map(function(slot){\n  //     return slot\n  // })\n  // console.log(\"slots level 3\", slots)\n\n  const allSlots = [{\n    day_of_week: 0,\n    time_of_day: []\n  }, {\n    day_of_week: 1,\n    time_of_day: []\n  }, {\n    day_of_week: 2,\n    time_of_day: []\n  }, {\n    day_of_week: 3,\n    time_of_day: []\n  }, {\n    day_of_week: 4,\n    time_of_day: []\n  }, {\n    day_of_week: 5,\n    time_of_day: []\n  }, {\n    day_of_week: 6,\n    time_of_day: []\n  }];\n\n  for (const elem of allData) {\n    for (const slot of elem) {\n      console.log(\"slot in element arr\", slot); // debugger\n\n      if (allSlots[slot.day_of_week].time_of_day !== slot.time_of_day) allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day); // const index = slot.findIndex(el => el.day_of_week === allSlots.day_of_week)\n      // if (index !== -1) {\n      //     // if it has it, it should push time_of_day into allSlots\n      //     allSlots[index].time_of_day.push(slot.time_of_day)\n      //     console.log(\"am I reaching this?\")\n      // } else {\n      //     console.log(\"am I reaching this #2?\")\n      //     allSlots.push({\n      //         ...slot,\n      //         day_of_week: [slot.day_of_week],\n      //         time_of_day: [slot.time_of_day]\n      //     })\n      // }\n    }\n\n    debugger;\n    console.log(\"allSlots array\", allSlots);\n    return allSlots;\n  }\n};\nexport function fetchBabysitters() {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING_BABYSITTERS'\n    });\n\n    try {\n      const res = await fetch('http://localhost:3000/api/v1/babysitters');\n\n      if (!res.ok) {\n        throw res;\n      }\n\n      const babyData = await res.json();\n      slotMerge(babyData);\n      dispatch(getBabysitters(babyData));\n    } catch (err) {\n      alert(\"Failed to load babysitters\");\n    }\n  };\n} // slot of element: {id: 14, day_of_week: 6, time_of_day: 2, babysitter_id: 3}\n// for (let slot of slots) {\n//     console.log(\"slot is\", slot[0])\n//     const index = allSlots.findIndex(el => el.day_of_week === slot.day_of_week)\n//     if (index !== -1) {\n//         allSlots[index].time_of_day.push(slot.time_of_day)\n//     } else {\n//         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\n//     }\n// }\n\n{\n  /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    â€‹\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","allData","map","babysitters","slots","console","log","allSlots","day_of_week","time_of_day","elem","slot","push","fetchBabysitters","dispatch","res","fetch","ok","json","err","alert"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAaC,WAAW,IAAIA,WAAW,CAACC,KAAxC,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,OAAlC,EAFiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMM,QAAQ,GAAG,CACb;AACIC,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GADa,EAKb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GALa,EASb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GATa,EAab;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAba,EAiBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAjBa,EAqBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GArBa,EAyBb;AACID,IAAAA,WAAW,EAAE,CADjB;AAEIC,IAAAA,WAAW,EAAE;AAFjB,GAzBa,CAAjB;;AA+BA,OAAK,MAAMC,IAAX,IAAmBT,OAAnB,EAA4B;AACxB,SAAK,MAAMU,IAAX,IAAmBD,IAAnB,EAAyB;AACrBL,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCK,IAAnC,EADqB,CAErB;;AACA,UAAIJ,QAAQ,CAACI,IAAI,CAACH,WAAN,CAAR,CAA2BC,WAA3B,KAA2CE,IAAI,CAACF,WAApD,EACAF,QAAQ,CAACI,IAAI,CAACH,WAAN,CAAR,CAA2BC,WAA3B,CAAuCG,IAAvC,CAA4CD,IAAI,CAACF,WAAjD,EAJqB,CASrB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,QAA9B;AACA,WAAOA,QAAP;AACH;AACJ,CAxEM;AA0EP,OAAO,SAASM,gBAAT,GAA4B;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAC;AAAEjB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMkB,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAAD,CAAvB;;AACA,UAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACT,cAAMF,GAAN;AACH;;AACD,YAAMf,QAAQ,GAAG,MAAMe,GAAG,CAACG,IAAJ,EAAvB;AAEAnB,MAAAA,SAAS,CAACC,QAAD,CAAT;AAEAc,MAAAA,QAAQ,CAACnB,cAAc,CAACK,QAAD,CAAf,CAAR;AACH,KAVD,CAUE,OAAOmB,GAAP,EAAY;AACVC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,GAfD;AAiBH,C,CAGD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAE;;;;;;;;;;;;;;;;;;AAiBK","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    const allData = babyData.map(babysitters => babysitters.slots)\r\n    console.log(\"allData is level 1\", allData)\r\n    // const babysitters = allData.map(function(babysitter){\r\n    //     return babysitter\r\n    // })\r\n    // console.log(\"babysitters level 2\", babysitters)\r\n    // const slots = babysitters.map(function(slot){\r\n    //     return slot\r\n    // })\r\n    // console.log(\"slots level 3\", slots)\r\n    const allSlots = [\r\n        {\r\n            day_of_week: 0,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 1,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 2,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 3,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 4,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 5,\r\n            time_of_day: []\r\n        },\r\n        {\r\n            day_of_week: 6,\r\n            time_of_day: []\r\n        },\r\n    ]\r\n\r\n    for (const elem of allData) {\r\n        for (const slot of elem) {\r\n            console.log(\"slot in element arr\", slot)\r\n            // debugger\r\n            if (allSlots[slot.day_of_week].time_of_day !== slot.time_of_day)\r\n            allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day)\r\n\r\n\r\n\r\n\r\n            // const index = slot.findIndex(el => el.day_of_week === allSlots.day_of_week)\r\n\r\n            // if (index !== -1) {\r\n            //     // if it has it, it should push time_of_day into allSlots\r\n            //     allSlots[index].time_of_day.push(slot.time_of_day)\r\n            //     console.log(\"am I reaching this?\")\r\n            // } else {\r\n            //     console.log(\"am I reaching this #2?\")\r\n\r\n            //     allSlots.push({\r\n            //         ...slot,\r\n            //         day_of_week: [slot.day_of_week],\r\n            //         time_of_day: [slot.time_of_day]\r\n            //     })\r\n            // }\r\n        }\r\n        debugger\r\n        console.log(\"allSlots array\", allSlots)\r\n        return allSlots\r\n    }\r\n}\r\n\r\nexport function fetchBabysitters() {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'LOADING_BABYSITTERS' })\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/v1/babysitters')\r\n            if (!res.ok) {\r\n                throw res\r\n            }\r\n            const babyData = await res.json()\r\n\r\n            slotMerge(babyData)\r\n\r\n            dispatch(getBabysitters(babyData))\r\n        } catch (err) {\r\n            alert(\"Failed to load babysitters\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// slot of element: {id: 14, day_of_week: 6, time_of_day: 2, babysitter_id: 3}\r\n\r\n\r\n\r\n// for (let slot of slots) {\r\n//     console.log(\"slot is\", slot[0])\r\n//     const index = allSlots.findIndex(el => el.day_of_week === slot.day_of_week)\r\n//     if (index !== -1) {\r\n//         allSlots[index].time_of_day.push(slot.time_of_day)\r\n//     } else {\r\n//         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\r\n//     }\r\n// }\r\n\r\n\r\n{ /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    â€‹\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}