{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  const allData = babyData.map(babysitters => babysitters.slots);\n  console.log(\"allData is\", allData);\n  const babysitters = allData.map(function (babysitter) {\n    return babysitter;\n  });\n  console.log(\"babysitters is\", babysitters);\n  const slots = babysitters.map(function (slots) {\n    return slots;\n  });\n  const allSlots = []; // for (let slot of slots) {\n  //     console.log(\"slot is\", slot[0])\n  //     const index = allSlots.findIndex(s => s.day_of_week === slot.day_of_week)\n  //     if (index !== -1) {\n  //         allSlots[index].time_of_day.push(slot.time_of_day)\n  //     } else {\n  //         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\n  //     }\n  // }\n\n  console.log(\"allSlots array\", allSlots);\n};\n{\n  /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    ​\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */\n}\nexport function fetchBabysitters() {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING_BABYSITTERS'\n    });\n\n    try {\n      const res = await fetch('http://localhost:3000/api/v1/babysitters');\n\n      if (!res.ok) {\n        throw res;\n      }\n\n      const babyData = await res.json();\n      slotMerge(babyData);\n      dispatch(getBabysitters(babyData));\n    } catch (err) {\n      alert(\"Failed to load babysitters\");\n    }\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","allData","map","babysitters","slots","console","log","babysitter","allSlots","fetchBabysitters","dispatch","res","fetch","ok","json","err","alert"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAaC,WAAW,IAAIA,WAAW,CAACC,KAAxC,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,OAA1B;AACA,QAAME,WAAW,GAAGF,OAAO,CAACC,GAAR,CAAY,UAASK,UAAT,EAAoB;AAChD,WAAOA,UAAP;AACH,GAFmB,CAApB;AAGAF,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,WAA9B;AACA,QAAMC,KAAK,GAAGD,WAAW,CAACD,GAAZ,CAAgB,UAASE,KAAT,EAAe;AACzC,WAAOA,KAAP;AACH,GAFa,CAAd;AAGA,QAAMI,QAAQ,GAAG,EAAjB,CAViC,CAYjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,QAA9B;AACH,CAtBM;AAwBP;AAAE;;;;;;;;;;;;;;;;;;AAiBK;AAEP,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMc,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAAD,CAAvB;;AACA,UAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACT,cAAMF,GAAN;AACH;;AACD,YAAMX,QAAQ,GAAG,MAAMW,GAAG,CAACG,IAAJ,EAAvB;AAEAf,MAAAA,SAAS,CAACC,QAAD,CAAT;AAEAU,MAAAA,QAAQ,CAACf,cAAc,CAACK,QAAD,CAAf,CAAR;AACH,KAVD,CAUE,OAAOe,GAAP,EAAY;AACVC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,GAfD;AAiBH","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    const allData = babyData.map(babysitters => babysitters.slots)\r\n    console.log(\"allData is\", allData)\r\n    const babysitters = allData.map(function(babysitter){\r\n        return babysitter\r\n    })\r\n    console.log(\"babysitters is\", babysitters)\r\n    const slots = babysitters.map(function(slots){\r\n        return slots\r\n    })\r\n    const allSlots = []\r\n\r\n    // for (let slot of slots) {\r\n    //     console.log(\"slot is\", slot[0])\r\n    //     const index = allSlots.findIndex(s => s.day_of_week === slot.day_of_week)\r\n    //     if (index !== -1) {\r\n    //         allSlots[index].time_of_day.push(slot.time_of_day)\r\n    //     } else {\r\n    //         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\r\n    //     }\r\n    // }\r\n    console.log(\"allSlots array\", allSlots)\r\n}\r\n\r\n{ /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    ​\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */}\r\n\r\nexport function fetchBabysitters() {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'LOADING_BABYSITTERS' })\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/v1/babysitters')\r\n            if (!res.ok) {\r\n                throw res\r\n            }\r\n            const babyData = await res.json()\r\n\r\n            slotMerge(babyData)\r\n\r\n            dispatch(getBabysitters(babyData))\r\n        } catch (err) {\r\n            alert(\"Failed to load babysitters\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}