{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport { connect } from 'react-redux';\nimport { deleteSlot } from '../actions/deleteSlot'; // const Slots = ({ babysitter, deleteSlot }) => {\n\nclass Slots extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      checkbox: false\n    };\n\n    this.handleChange = () => {\n      this.setState(state => {\n        return {\n          checkbox: !state.checkbox\n        };\n      });\n    };\n  }\n\n  render() {\n    let {\n      babysitter,\n      deleteSlot\n    } = this.props;\n    let slotList = this.state.checkbox ? babysitter.slots.filter(s => {\n      return s.time_of_day.length != 0;\n    }) : babysitter.slots;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"addSpace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Tick to View Only Available Slots: \"), React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), slotList.map(slot => {\n      return card(slot);\n    }));\n\n    function dayToString(day_of_week) {\n      if (day_of_week === 0) {\n        return \"Sunday\";\n      } else if (day_of_week === 1) {\n        return \"Monday\";\n      } else if (day_of_week === 2) {\n        return \"Tuesday\";\n      } else if (day_of_week === 3) {\n        return \"Wednesday\";\n      } else if (day_of_week === 4) {\n        return \"Thursday\";\n      } else if (day_of_week == 5) {\n        return \"Friday\";\n      } else if (day_of_week === 6) {\n        return \"Saturday\";\n      }\n    }\n\n    function removeSlot(slot, babysitter) {\n      deleteSlot(slot, babysitter);\n    }\n\n    function theSlot(time_of_day) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, time_of_day.map(time => {\n        if (time.time === 0) {\n          return React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, \"Morning\");\n        } else if (time.time === 1) {\n          return React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, \"Afternoon\");\n        } else if (time.time === 2) {\n          return React.createElement(\"li\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, \"Evening\");\n        }\n      }));\n    }\n\n    function card(slot) {\n      return React.createElement(Row, {\n        className: \"babyCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(CardDeck, {\n        className: \"card-padding date-cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Card, {\n        bg: \"light\",\n        style: {\n          width: '14rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Card.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, dayToString(slot.day_of_week)), React.createElement(ListGroup, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(ListGroup.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, theSlot(slot.time_of_day), React.createElement(\"button\", {\n        variant: \"link\",\n        size: \"sm\",\n        className: \"reset-button\",\n        onClick: () => removeSlot(slot, babysitter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Reset \", dayToString(slot.day_of_week)))))));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    babysitters: state.babysitters,\n    loading: state.loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteSlot\n})(Slots);","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/components/Slots.js"],"names":["React","Card","CardDeck","ListGroup","Row","connect","deleteSlot","Slots","Component","state","checkbox","handleChange","setState","render","babysitter","props","slotList","slots","filter","s","time_of_day","length","map","slot","card","dayToString","day_of_week","removeSlot","theSlot","time","width","mapStateToProps","babysitters","loading"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Row from 'react-bootstrap/Row'\r\nimport { connect } from 'react-redux'\r\nimport { deleteSlot } from '../actions/deleteSlot'\r\n\r\n// const Slots = ({ babysitter, deleteSlot }) => {\r\nclass Slots extends React.Component {\r\n\r\n        state = {\r\n            checkbox: false\r\n        }\r\n\r\n    \r\n    handleChange = () => {\r\n       this.setState( (state) => {\r\n          return { checkbox: !state.checkbox }\r\n       })\r\n    }\r\n\r\n    render() {\r\n        let { babysitter, deleteSlot } = this.props\r\n        let slotList = this.state.checkbox ? babysitter.slots.filter(s => {\r\n            return s.time_of_day.length != 0\r\n        }) : babysitter.slots\r\n        return (\r\n            <div>\r\n                <label className=\"addSpace\">Tick to View Only Available Slots: </label>\r\n                <input type=\"checkbox\" onChange={this.handleChange} />\r\n                {slotList.map(slot => { return card(slot) })}\r\n            </div>\r\n        )\r\n\r\n        \r\n\r\n        function dayToString(day_of_week) {\r\n            if (day_of_week === 0) {\r\n                return \"Sunday\"\r\n            } else if (day_of_week === 1) {\r\n                return \"Monday\"\r\n            } else if (day_of_week === 2) {\r\n                return \"Tuesday\"\r\n            } else if (day_of_week === 3) {\r\n                return \"Wednesday\"\r\n            } else if (day_of_week === 4) {\r\n                return \"Thursday\"\r\n            } else if (day_of_week == 5) {\r\n                return \"Friday\"\r\n            } else if (day_of_week === 6) {\r\n                return \"Saturday\"\r\n            }\r\n        }\r\n\r\n        function removeSlot(slot, babysitter) {\r\n            deleteSlot(slot, babysitter)\r\n        }\r\n\r\n\r\n\r\n        function theSlot(time_of_day) {\r\n            return <div>{time_of_day.map(time => {\r\n                if (time.time === 0) {\r\n                    return <li>Morning</li>\r\n                } else if (time.time === 1) {\r\n                    return <li>Afternoon</li>\r\n                } else if (time.time === 2) {\r\n                    return <li>Evening</li>\r\n                }\r\n            })\r\n            }\r\n            </div>\r\n        }\r\n\r\n        function card(slot) {\r\n            return (\r\n                <Row className=\"babyCard\">\r\n                    <CardDeck className=\"card-padding date-cards\">\r\n                        <Card bg=\"light\" style={{ width: '14rem' }}>\r\n                            <Card.Header>{dayToString(slot.day_of_week)}</Card.Header>\r\n                            <ListGroup variant=\"info\">\r\n                                <ListGroup.Item>\r\n                                    {theSlot(slot.time_of_day)}\r\n                                    <button variant=\"link\" size=\"sm\" className=\"reset-button\" onClick={() => removeSlot(slot, babysitter)}>Reset {dayToString(slot.day_of_week)}</button>\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    </CardDeck>\r\n                </Row >\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        babysitters: state.babysitters,\r\n        loading: state.loading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteSlot })(Slots)\r\n"]},"metadata":{},"sourceType":"module"}