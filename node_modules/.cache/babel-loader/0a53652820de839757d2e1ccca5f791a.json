{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  return babyData.map(babysitter => {\n    const allSlots = [{\n      id: uuid(),\n      day_of_week: 0,\n      time_of_day: []\n    }, {\n      day_of_week: 1,\n      time_of_day: []\n    }, {\n      day_of_week: 2,\n      time_of_day: []\n    }, {\n      day_of_week: 3,\n      time_of_day: []\n    }, {\n      day_of_week: 4,\n      time_of_day: []\n    }, {\n      day_of_week: 5,\n      time_of_day: []\n    }, {\n      day_of_week: 6,\n      time_of_day: []\n    }];\n\n    for (const slot of babysitter.slots) {\n      if (allSlots[slot.day_of_week] && allSlots[slot.day_of_week].time_of_day !== slot.time_of_day) {\n        allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day);\n      }\n    }\n\n    return { ...babysitter,\n      slots: allSlots\n    };\n  });\n};\nexport function fetchBabysitters() {\n  return async dispatch => {\n    dispatch({\n      type: 'LOADING_BABYSITTERS'\n    });\n\n    try {\n      const res = await fetch('http://localhost:3000/api/v1/babysitters'); // console.log(\"res 1\", res)\n\n      if (!res.ok) {\n        throw console.log(res);\n      }\n\n      const babyData = await res.json();\n      const slotArr = slotMerge(babyData); // console.log(\"This is slotArr\", slotArr)\n\n      let response = getBabysitters(slotArr); // console.log(\"response 3\", response)\n\n      dispatch(response);\n    } catch (err) {\n      console.log(err);\n      alert(\"Failed to load babysitters\");\n    }\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","map","babysitter","allSlots","id","uuid","day_of_week","time_of_day","slot","slots","push","fetchBabysitters","dispatch","res","fetch","ok","console","log","json","slotArr","response","err","alert"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC,SAAOA,QAAQ,CAACC,GAAT,CAAaC,UAAU,IAAI;AAC9B,UAAMC,QAAQ,GAAG,CACb;AACIC,MAAAA,EAAE,EAAEC,IAAI,EADZ;AAEIC,MAAAA,WAAW,EAAE,CAFjB;AAGIC,MAAAA,WAAW,EAAE;AAHjB,KADa,EAMb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KANa,EAUb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KAVa,EAcb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KAda,EAkBb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KAlBa,EAsBb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KAtBa,EA0Bb;AACID,MAAAA,WAAW,EAAE,CADjB;AAEIC,MAAAA,WAAW,EAAE;AAFjB,KA1Ba,CAAjB;;AA+BA,SAAK,MAAMC,IAAX,IAAmBN,UAAU,CAACO,KAA9B,EAAqC;AACjC,UAAIN,QAAQ,CAACK,IAAI,CAACF,WAAN,CAAR,IAA8BH,QAAQ,CAACK,IAAI,CAACF,WAAN,CAAR,CAA2BC,WAA3B,KAA2CC,IAAI,CAACD,WAAlF,EAA+F;AAC3FJ,QAAAA,QAAQ,CAACK,IAAI,CAACF,WAAN,CAAR,CAA2BC,WAA3B,CAAuCG,IAAvC,CAA4CF,IAAI,CAACD,WAAjD;AACH;AACJ;;AACD,WAAO,EAAE,GAAGL,UAAL;AAAiBO,MAAAA,KAAK,EAAEN;AAAxB,KAAP;AACH,GAtCM,CAAP;AAuCH,CAxCM;AA0CP,OAAO,SAASQ,gBAAT,GAA4B;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAC;AAAEf,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;;AACA,QAAI;AACA,YAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAC,0CAAD,CAAvB,CADA,CAEA;;AACA,UAAI,CAACD,GAAG,CAACE,EAAT,EAAa;AACT,cAAMC,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAN;AACH;;AACD,YAAMb,QAAQ,GAAG,MAAMa,GAAG,CAACK,IAAJ,EAAvB;AAEA,YAAMC,OAAO,GAAGpB,SAAS,CAACC,QAAD,CAAzB,CARA,CASA;;AAEA,UAAIoB,QAAQ,GAAGzB,cAAc,CAACwB,OAAD,CAA7B,CAXA,CAYA;;AACAP,MAAAA,QAAQ,CAACQ,QAAD,CAAR;AACH,KAdD,CAcE,OAAOC,GAAP,EAAY;AACVL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACH;AACJ,GApBD;AAsBH","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    return babyData.map(babysitter => {\r\n        const allSlots = [\r\n            {\r\n                id: uuid(),\r\n                day_of_week: 0,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 1,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 2,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 3,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 4,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 5,\r\n                time_of_day: []\r\n            },\r\n            {\r\n                day_of_week: 6,\r\n                time_of_day: []\r\n            },\r\n        ]\r\n        for (const slot of babysitter.slots) {\r\n            if (allSlots[slot.day_of_week] && allSlots[slot.day_of_week].time_of_day !== slot.time_of_day) {\r\n                allSlots[slot.day_of_week].time_of_day.push(slot.time_of_day)\r\n            }\r\n        }\r\n        return { ...babysitter, slots: allSlots }\r\n    })\r\n}\r\n\r\nexport function fetchBabysitters() {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'LOADING_BABYSITTERS' })\r\n        try {\r\n            const res = await fetch('http://localhost:3000/api/v1/babysitters')\r\n            // console.log(\"res 1\", res)\r\n            if (!res.ok) {\r\n                throw console.log(res)\r\n            }\r\n            const babyData = await res.json()\r\n\r\n            const slotArr = slotMerge(babyData)\r\n            // console.log(\"This is slotArr\", slotArr)\r\n\r\n            let response = getBabysitters(slotArr)\r\n            // console.log(\"response 3\", response)\r\n            dispatch(response)\r\n        } catch (err) {\r\n            console.log(err)\r\n            alert(\"Failed to load babysitters\")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}