{"ast":null,"code":"export const getBabysitters = props => {\n  return {\n    type: 'FETCH_BABYSITTERS',\n    payload: props\n  };\n};\nexport const slotMerge = babyData => {\n  const allData = babyData.map(babysitters => babysitters.slots);\n  console.log(\"allData is level 1\", allData); // const babysitters = allData.map(function(babysitter){\n  //     return babysitter\n  // })\n  // console.log(\"babysitters level 2\", babysitters)\n  // const slots = babysitters.map(function(slot){\n  //     return slot\n  // })\n  // console.log(\"slots level 3\", slots)\n\n  const allSlots = [];\n\n  for (const elem of allData) {\n    for (const slot of elem) {\n      console.log(\"slot in element arr\", slot);\n      const index = slot.findIndex(el => el.day_of_week === allSlots.day_of_week);\n\n      if (index !== -1) {\n        // if it has it, it should push time_of_day into allSlots\n        allSlots[index].time_of_day.push(slot.time_of_day);\n      } else {\n        allSlots.push({ ...slot,\n          day_of_week: [slot.day_of_week],\n          time_of_day: [slot.time_of_day]\n        });\n      }\n    }\n  }\n\n  console.log(\"allSlots array\", allSlots);\n}; // slot of element: {id: 14, day_of_week: 6, time_of_day: 2, babysitter_id: 3}\n// for (let slot of slots) {\n//     console.log(\"slot is\", slot[0])\n//     const index = allSlots.findIndex(el => el.day_of_week === slot.day_of_week)\n//     if (index !== -1) {\n//         allSlots[index].time_of_day.push(slot.time_of_day)\n//     } else {\n//         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\n//     }\n// }\n\n{\n  /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    ​\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */\n}","map":{"version":3,"sources":["/mnt/c/Users/aviga/Desktop/Flatiron/Projects/react_babysitting/babysitting-app/src/actions/fetchBabysitters.js"],"names":["getBabysitters","props","type","payload","slotMerge","babyData","allData","map","babysitters","slots","console","log","allSlots","elem","slot","index","findIndex","el","day_of_week","time_of_day","push"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAO;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,OAAO,EAAEF;AAAtC,GAAP;AACH,CAFM;AAIP,OAAO,MAAMG,SAAS,GAAGC,QAAQ,IAAI;AACjC,QAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,CAAaC,WAAW,IAAIA,WAAW,CAACC,KAAxC,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,OAAlC,EAFiC,CAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMM,QAAQ,GAAG,EAAjB;;AAEA,OAAK,MAAMC,IAAX,IAAmBP,OAAnB,EAA4B;AACxB,SAAK,MAAMQ,IAAX,IAAmBD,IAAnB,EAAyB;AACrBH,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,IAAnC;AACA,YAAMC,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAeC,EAAE,IAAIA,EAAE,CAACC,WAAH,KAAmBN,QAAQ,CAACM,WAAjD,CAAd;;AACA,UAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd;AACAH,QAAAA,QAAQ,CAACG,KAAD,CAAR,CAAgBI,WAAhB,CAA4BC,IAA5B,CAAiCN,IAAI,CAACK,WAAtC;AACH,OAHD,MAGO;AACHP,QAAAA,QAAQ,CAACQ,IAAT,CAAc,EACV,GAAGN,IADO;AAEVI,UAAAA,WAAW,EAAE,CAACJ,IAAI,CAACI,WAAN,CAFH;AAGVC,UAAAA,WAAW,EAAE,CAACL,IAAI,CAACK,WAAN;AAHH,SAAd;AAKH;AAMJ;AACJ;;AACDT,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,QAA9B;AACH,CAnCM,C,CAuCP;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAE;;;;;;;;;;;;;;;;;;AAiBK","sourcesContent":["export const getBabysitters = (props) => {\r\n    return { type: 'FETCH_BABYSITTERS', payload: props }\r\n}\r\n\r\nexport const slotMerge = babyData => {\r\n    const allData = babyData.map(babysitters => babysitters.slots)\r\n    console.log(\"allData is level 1\", allData)\r\n    // const babysitters = allData.map(function(babysitter){\r\n    //     return babysitter\r\n    // })\r\n    // console.log(\"babysitters level 2\", babysitters)\r\n    // const slots = babysitters.map(function(slot){\r\n    //     return slot\r\n    // })\r\n    // console.log(\"slots level 3\", slots)\r\n    const allSlots = []\r\n\r\n    for (const elem of allData) {\r\n        for (const slot of elem) {\r\n            console.log(\"slot in element arr\", slot)\r\n            const index = slot.findIndex(el => el.day_of_week === allSlots.day_of_week)\r\n            if (index !== -1) {\r\n                // if it has it, it should push time_of_day into allSlots\r\n                allSlots[index].time_of_day.push(slot.time_of_day)\r\n            } else {\r\n                allSlots.push({\r\n                    ...slot,\r\n                    day_of_week: [slot.day_of_week],\r\n                    time_of_day: [slot.time_of_day]\r\n                })\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    console.log(\"allSlots array\", allSlots)\r\n}\r\n\r\n\r\n\r\n// slot of element: {id: 14, day_of_week: 6, time_of_day: 2, babysitter_id: 3}\r\n\r\n\r\n\r\n// for (let slot of slots) {\r\n//     console.log(\"slot is\", slot[0])\r\n//     const index = allSlots.findIndex(el => el.day_of_week === slot.day_of_week)\r\n//     if (index !== -1) {\r\n//         allSlots[index].time_of_day.push(slot.time_of_day)\r\n//     } else {\r\n//         allSlots.push({ ...slot, time_of_day: [slot.time_of_day] })\r\n//     }\r\n// }\r\n\r\n\r\n{ /*\r\n    const slots = data.slots\r\n    const consolidatedSlots = []\r\n    for(slot of slots){\r\n        const index = consolidatedSlots.findIndex(s => s.day === slot.day)\r\n        if(index !== -1){ // if the index is not -1 it means it exists\r\n            \r\n            // add the new timeslot to the slot for the day that already is in your consolidatedSlots\r\n            consolidatedSlots[index].times.push(slot.time)\r\n        }else{ // if index IS -1, you couldnt find a slot with this day\r\n            \r\n            // turn time into times and make it an array of the time option\r\n            consolidatedSlots.push({...slot, times: [slot.time]}) \r\n        }\r\n    }\r\n    ​\r\n    // now your action.payload (or whatever key you are using) is going to be consolidatedSlots\r\n    */}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}